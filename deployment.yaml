

apiVersion: apps/v1
kind: Deployment
metadata:
  name: udagram-api-feed
  labels:
    app: udagram-api-feed
spec:
  replicas: 2
  selector:
    matchLabels:
      app: udagram-api-feed
  template:
    metadata:
      labels:
        app: udagram-api-feed
    spec:
      containers:
      - name: udagram-api-feed
        image: mohammedismaiel/udagram-api-feed:v13
        imagePullPolicy: Always
        resources:
          requests:
            memory: "1024Mi"
            cpu: "250m"
          limits:
            memory: "2048Mi"
            cpu: "500m"
        # env:
          # - name: URL
          #   valueFrom:
          #     configMapKeyRef:
          #       name: env-configmap
          #       key: URL
          # - name: AWS_BUCKET
          #   valueFrom:
          #     configMapKeyRef:
          #       name: env-configmap
          #       key: AWS_BUCKET
          # - name: AWS_PROFILE
          #   valueFrom:
          #     configMapKeyRef:
          #       name: env-configmap
          #       key: AWS_PROFILE
          # - name: AWS_REGION
          #   valueFrom:
          #     configMapKeyRef:
          #       name: env-configmap
          #       key: AWS_REGION
          # - name: POSTGRES_DB
          #   valueFrom:
          #     configMapKeyRef:
          #       name: env-configmap
          #       key: POSTGRES_DB
          # - name: POSTGRES_HOST
          #   valueFrom:
          #     configMapKeyRef:
          #       name: env-configmap
          #       key: POSTGRES_HOST
          # - name: POSTGRES_USERNAME
          #   valueFrom:
          #     configMapKeyRef:
          #       name: env-configmap
          #       key: POSTGRES_USERNAME
          # - name: POSTGRES_PASSWORD
          #   valueFrom:
          #     configMapKeyRef:
          #       name: env-configmap
          #       key: POSTGRES_PASSWORD
          # - name: JWT_SECRET
          #   valueFrom:
          #     configMapKeyRef:
          #       name: env-configmap
          #       key: JWT_SECRET
        volumeMounts:
          - name: aws-secret
            mountPath: "/root/.aws/"
            readOnly: true
        ports:
        - containerPort: 8080
      volumes:
        - name: aws-secret
          secret:
            secretName: aws-secret
